package org.jboss.windup.rules.apps.legacy.java;

import org.jboss.windup.config.RulePhase;
import org.jboss.windup.config.WindupRuleProvider;
import org.jboss.windup.config.metadata.RuleMetadata;
import org.jboss.windup.config.operation.Iteration;
import org.jboss.windup.graph.GraphContext;
import org.jboss.windup.reporting.config.Hint;
import org.jboss.windup.reporting.config.WhiteList;
import org.jboss.windup.rules.apps.java.config.JavaClass;
import org.jboss.windup.rules.apps.java.scan.ast.TypeReferenceLocation;
import org.ocpsoft.rewrite.config.Configuration;
import org.ocpsoft.rewrite.config.ConfigurationBuilder;
import org.ocpsoft.rewrite.context.Context;

public class Config extends WindupRuleProvider
{

    @Override
    public RulePhase getPhase()
    {
        return RulePhase.DISCOVERY;
    }

    @Override
    public void enhanceMetadata(Context context)
    {
        context.put(RuleMetadata.CATEGORY, "Java");
    }

    // @formatter:off
    @Override
    public Configuration getConfiguration(GraphContext context)
    {

        Configuration configuration = ConfigurationBuilder
                    .begin()
                    .addRule()
                    .when(
                                JavaClass.references("amx_").at(TypeReferenceLocation.TYPE))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("amx_").at(TypeReferenceLocation.METHOD))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("((javax.naming.InitialContext)|(javax.naming.Context))$").at(
                                            TypeReferenceLocation.IMPORT))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("((javax.naming.InitialContext)|(javax.naming.Context)).close")
                                            .at(TypeReferenceLocation.METHOD))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("((javax.naming.InitialContext)|(javax.naming.Context))$").at(
                                            TypeReferenceLocation.TYPE))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.naming.InitialContext\\(\\)").at(
                                            TypeReferenceLocation.CONSTRUCTOR_CALL))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.ejb.+$").at(TypeReferenceLocation.IMPORT))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references(
                                            "(javax.ejb.EntityContext.*)|(javax.ejb.RemoveException.*)|(javax.ejb.SessionContext.*)|(javax.ejb.EJBException.*)|(javax.ejb.CreateException$)|(javax.ejb.FinderException$)")
                                            .at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.sql.+$").at(TypeReferenceLocation.IMPORT))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.+$").at(TypeReferenceLocation.IMPORT))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.+$").at(TypeReferenceLocation.TYPE))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.remote.JMXConnector.close.+$").at(
                                            TypeReferenceLocation.METHOD))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references(
                                            "javax.management.remote.JMXConnector.getMBeanServerConnection\\(\\)").at(
                                            TypeReferenceLocation.METHOD))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.io.LineNumberInputStream$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.io.ObjectInputStream$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.io.ObjectOutputStream.PutField$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.io.StreamTokenizer$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.io.StringBufferInputStream$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.lang.Character.UnicodeBlock.SURROGATES_AREA$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.lang.ClassLoader$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.lang.Runtime$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.lang.SecurityManager$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.lang.SecurityManager.inCheck$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.lang.System$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.lang.Thread$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.lang.ThreadGroup$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.net.DatagramSocketImpl$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.net.HttpURLConnection.HTTP_SERVER_ERROR$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.net.MulticastSocket$")
                                            .at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.net.Socket$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.net.URLConnection$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.net.URLDecoder$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.net.URLEncoder$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.net.URLStreamHandler$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("com.ibm.ac.commonbaseevent101").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.dgc.VMID$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.registry.RegistryHandler$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.RMISecurityException$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.server.LoaderHandler$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.server.LogStream$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.server.Operation$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.server.RemoteCall$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.server.RemoteRef$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.server.RemoteStub$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.server.RMIClassLoader$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.server.Skeleton$")
                                            .at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.server.SkeletonMismatchException$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.server.SkeletonNotFoundException$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.rmi.ServerRuntimeException$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.security.Certificate$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.security.Identity$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.security.IdentityScope$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.security.Security$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.security.Signature$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.security.SignatureSpi$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.security.Signer$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.sql.CallableStatement$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.sql.Date$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.sql.DriverManager$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.sql.PreparedStatement$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.sql.ResultSet$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.sql.Time$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.sql.Timestamp$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.util.logging.Logger.global$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("java.util.Properties$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.accessibility.AccessibleResourceBundle$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.activation.ActivationDataFlavor$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.imageio.spi.ImageReaderSpi.STANDARD_INPUT_TYPE$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.imageio.spi.ImageWriterSpi.STANDARD_OUTPUT_TYPE$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.jws.HandlerChain.name$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.jws.soap.InitParam$")
                                            .at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.jws.soap.SOAPMessageHandler$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.jws.soap.SOAPMessageHandlers$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.AttributeValueExp$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.DefaultLoaderRepository$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.loading.DefaultLoaderRepository$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.MBeanServer$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.monitor.CounterMonitor$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.monitor.CounterMonitorMBean$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.monitor.GaugeMonitor$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.monitor.GaugeMonitorMBean$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.monitor.Monitor$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.monitor.Monitor.alreadyNotified$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.monitor.Monitor.dbgTag$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.monitor.MonitorMBean$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.monitor.StringMonitor$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.monitor.StringMonitorMBean$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.openmbean.OpenType.ALLOWED_CLASSNAMES$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.StringValueExp$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.management.ValueExp$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.security.auth.Policy$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.sql.rowset.BaseRowSet$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.sql.rowset.CachedRowSet.COMMIT_ON_ACCEPT_CHANGES$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.AbstractButton$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.FocusManager$")
                                            .at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.JComponent$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.JInternalFrame$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.JList$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.JMenuBar$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.JPasswordField$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.JPopupMenu$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.JRootPane$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.JRootPane.defaultPressAction$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.JRootPane.defaultReleaseAction$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.JTable$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.JViewport$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.JViewport.backingStore$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.KeyStroke$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicDesktopPaneUI.closeKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicDesktopPaneUI.maximizeKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicDesktopPaneUI.minimizeKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicDesktopPaneUI.navigateKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicDesktopPaneUI.navigateKey2$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicInternalFrameUI.openMenuKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicSplitPaneUI$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicSplitPaneUI.dividerResizeToggleKey$")
                                            .at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicSplitPaneUI.downKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicSplitPaneUI.endKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicSplitPaneUI.homeKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references(
                                            "javax.swing.plaf.basic.BasicSplitPaneUI.keyboardDownRightListener$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicSplitPaneUI.keyboardEndListener$")
                                            .at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicSplitPaneUI.keyboardHomeListener$")
                                            .at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references(
                                            "javax.swing.plaf.basic.BasicSplitPaneUI.keyboardResizeToggleListener$")
                                            .at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicSplitPaneUI.keyboardUpLeftListener$")
                                            .at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicSplitPaneUI.leftKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicSplitPaneUI.rightKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicSplitPaneUI.upKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicTabbedPaneUI.downKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicTabbedPaneUI.leftKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicTabbedPaneUI.rightKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicTabbedPaneUI.upKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicToolBarUI.downKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicToolBarUI.leftKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicToolBarUI.rightKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.basic.BasicToolBarUI.upKey$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.metal.MetalComboBoxUI$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.metal.MetalComboBoxUI.MetalComboPopup$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.plaf.metal.MetalScrollPaneUI$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.ScrollPaneLayout$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.SwingUtilities$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.table.TableColumn$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.table.TableColumn.resizedPostingDisableCount$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.text.DefaultTextUI$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.text.html.FormView.RESET$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.text.html.FormView.SUBMIT$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.text.html.HTMLEditorKit.InsertHTMLTextAction$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.text.LabelView$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.text.TableView$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.text.TableView.TableCell$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.text.View$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.swing.tree.DefaultTreeSelectionModel$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.xml.bind.JAXBContext$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.xml.bind.Unmarshaller$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.xml.bind.Validator$")
                                            .at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.xml.soap.SOAPElementFactory$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.xml.stream.XMLEventFactory$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.xml.stream.XMLInputFactory$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("javax.xml.stream.XMLOutputFactory$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.Any$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.DynamicImplementation$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.DynAny$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.DynArray$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.DynEnum$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.DynFixed$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.DynSequence$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.DynStruct$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.DynUnion$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.DynValue$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.ORB$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.portable.InputStream$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.portable.OutputStream$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.Principal$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.PrincipalHolder$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.ServerRequest$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.omg.CORBA.TCKind$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.xml.sax.AttributeList$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.xml.sax.DocumentHandler$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.xml.sax.HandlerBase$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.xml.sax.helpers.AttributeListImpl$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.xml.sax.helpers.ParserFactory$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("org.xml.sax.Parser$").at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(
                                Iteration.over().perform(
                                            WhiteList.add()
                                            )
                                            .endIteration()
                    )
                    .addRule()
                    .when(
                                JavaClass.references("edu.oswego.cs.dl.util.concurrent").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(Iteration.over()
                                .perform(Hint.withText("Upgrade to javax.util.concurrent in Java 5+").withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("edu.emory.mathcs.backport.java.util").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(Iteration.over()
                                .perform(Hint.withText("Upgrade to javax.util.concurrent in Java 5+").withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("java.lang.Class.classForName").at(TypeReferenceLocation.METHOD))
                    .perform(Iteration.over()
                                .perform(Hint.withText("Ensure class is available to JBoss").withEffort(1)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("oracle.sql.*").at(TypeReferenceLocation.TYPE))
                    .perform(Iteration.over().perform(Hint.withText("Oracle-specific SQL code").withEffort(1)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("org.osoa.sca.annotations.+").at(TypeReferenceLocation.IMPORT))
                    .perform(Iteration.over().perform(Hint.withText("Remove import").withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("org.osoa.sca.annotations.Property")
                                            .at(TypeReferenceLocation.TYPE))
                    .perform(Iteration
                                .over()
                                .perform(Hint.withText(
                                            "SCA Property Injection; replace with Spring Property Injection")
                                            .withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("org.osoa.sca.annotations.Reference").at(
                                            TypeReferenceLocation.TYPE))
                    .perform(Iteration
                                .over()
                                .perform(Hint.withText("SCA Bean Injection; replace with Spring Bean Injection")
                                            .withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("org.osoa.sca.annotations.Init").at(TypeReferenceLocation.TYPE))
                    .perform(Iteration
                                .over()
                                .perform(Hint
                                            .withText("SCA Initialization Hook; Use the property: init-method='example' on the Spring Bean, where example is the initialization method")
                                            .withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("org.osoa.sca.annotations.Destroy").at(TypeReferenceLocation.TYPE))
                    .perform(Iteration
                                .over()
                                .perform(Hint
                                            .withText("SCA Destroy Hook; Use the property: destroy-method='example' on the Spring Bean, where example is the destroy method")
                                            .withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("com.ibm.ctg.client.JavaGateway").at(TypeReferenceLocation.TYPE))
                    .perform(Iteration.over().perform(Hint.withText("IBM CICS Adapter").withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("((javax.naming.InitialContext)|(javax.naming.Context)).lookup")
                                            .at(TypeReferenceLocation.METHOD))
                    .perform(Iteration.over().perform(Hint.withText("<![CDATA[\n" + 
                                "                Ensure that the JNDI Name does not need to change for JBoss\n" + 
                                "                \n" + 
                                "                *For Example:*\n" + 
                                "                \n" + 
                                "                ```java\n" + 
                                "                (ConnectionFactory)initialContext.lookup(\"weblogic.jms.ConnectionFactory\");\n" + 
                                "                ```\n" + 
                                "                \n" + 
                                "                *should become:*\n" + 
                                "                \n" + 
                                "                ```java\n" + 
                                "                (ConnectionFactory)initialContext.lookup(\"/ConnectionFactory\");\n" + 
                                "                ```\n" + 
                                "                \n" + 
                                "                \n" + 
                                "                ]]>").withEffort(1)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("javax.naming.InitialContext\\(.+\\)").at(
                                            TypeReferenceLocation.CONSTRUCTOR_CALL))
                    .perform(Iteration
                                .over()
                                .perform(Hint
                                            .withText("Ensure that the InitialContext connection properties do not need to change for JBoss")
                                            .withEffort(1)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("javax.management.remote.JMXServiceURL\\(.+\\)").at(
                                            TypeReferenceLocation.CONSTRUCTOR_CALL))
                    .perform(Iteration
                                .over()
                                .perform(Hint.withText(
                                            "Ensure that the connection properties do not need to change for JBoss")
                                            .withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("javax.management.ObjectName\\(.+\\)").at(
                                            TypeReferenceLocation.CONSTRUCTOR_CALL))
                    .perform(Iteration.over()
                                .perform(Hint.withText("Ensure that the ObjectName exists in JBoss").withEffort(1)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("javax.management.remote.JMXConnectorFactory.connect\\(.+\\)").at(
                                            TypeReferenceLocation.METHOD))
                    .perform(Iteration
                                .over()
                                .perform(Hint.withText(
                                            "Ensure that the connection properties do not need to change for JBoss")
                                            .withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("java.sql.DriverManager").at(TypeReferenceLocation.METHOD))
                    .perform(Iteration
                                .over()
                                .perform(Hint
                                            .withText("Move to a JCA Connector unless this class is used for batch processes, then refactor as necessary")
                                            .withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("java.sql.DriverManager$").at(TypeReferenceLocation.IMPORT))
                    .perform(Iteration.over().perform(Hint.withText("Migrate to JCA Connector").withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("amx_.+").at(TypeReferenceLocation.IMPORT))
                    .perform(Iteration
                                .over()
                                .perform(Hint.withText(
                                            "Tibco ActiveMatrix Stub; regenerate the SOAP Client for the class")
                                            .withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("com.tibco.matrix.java.annotations.WebParam$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(Iteration
                                .over()
                                .perform(Hint.withText("Tibco specific annotation; replace with javax.jws.WebParam")
                                            .withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("com.tibco.amf.platform.runtime.extension.exception.SOAPCode$")
                                            .at(TypeReferenceLocation.NOTSPECIFIED))
                    .perform(Iteration.over().perform(Hint.withText("Tibco specific annotation").withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("com.tibco.matrix.java.annotations.WebServiceInterface$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(Iteration
                                .over()
                                .perform(Hint
                                            .withText("Tibco specific annotation; replace with javax.jws.WebService")
                                            .withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("com.tibco.matrix.java.annotations.WebMethod$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(Iteration
                                .over()
                                .perform(Hint.withText("Tibco specific annotation; replace with javax.jws.WebMethod")
                                            .withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("com.tibco.matrix.java.annotations.WebFault$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(Iteration
                                .over()
                                .perform(Hint.withText(
                                            "Tibco specific annotation; replace with javax.xml.ws.WebFault")
                                            .withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("org.mule.transformers.AbstractTransformer$").at(
                                            TypeReferenceLocation.NOTSPECIFIED))
                    .perform(Iteration
                                .over()
                                .perform(Hint.withText(
                                            "Mule specific; replace with org.apache.camel.Converter annotation")
                                            .withEffort(0)
                                )
                                .endIteration()
                    )

                    .addRule()
                    .when(
                                JavaClass.references("org.mule.umo.UMOMessage.getPayload.+").at(
                                            TypeReferenceLocation.METHOD))
                    .perform(Iteration
                                .over()
                                .perform(Hint.withText(
                                            "Mule specific; replace with org.apache.camel.Message.getBody()")
                                            .withEffort(0)
                                )
                                .endIteration()
                    );
        
        return configuration;
    }
    // @formatter:on
}
